// <auto-generated />
using System;
using ClinicManagement.Data.DbContexts.Sql.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicManagement.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230505211914_Mig3")]
    partial class Mig3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.AppointmentAggregateRoot.AppointmentAggregateRoot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientUserId");

                    b.ToTable("AppointmentAggregateRoots");
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.AppointmentAggregateRoot.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.AppointmentAggregateRoot.Entities.PaymentInstallments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsuranceCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceCompanyId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("PaymentInstallments");
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.ClinicAggregateRoot.ClinicAggregateRoot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfEstablishment")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ClinicAggregateRoots");
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.InsuranceCompanyAggregateRoot.Entities.InsuredPatientUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InsuranceCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsuredFromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InsuredToDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceCompanyId");

                    b.HasIndex("PatientUserId");

                    b.ToTable("InsuredPatientUsers");
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.InsuranceCompanyAggregateRoot.InsuranceCompanyAggregateRoot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameOfCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InsuranceCompanyAggregateRoots");
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.UserAggregateRoot.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.UserAggregateRoot.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.UserAggregateRoot.UserAggregateRoot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Entities.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Entities.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Entities.Identity.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SentralProvider")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.AppointmentAggregateRoot.AppointmentAggregateRoot", b =>
                {
                    b.HasOne("ClinicManagement.Entities.AggregateRoots.UserAggregateRoot.UserAggregateRoot", "PatientUser")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PatientUser");
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.AppointmentAggregateRoot.Entities.Invoice", b =>
                {
                    b.HasOne("ClinicManagement.Entities.AggregateRoots.AppointmentAggregateRoot.AppointmentAggregateRoot", "Appointment")
                        .WithOne("Invoice")
                        .HasForeignKey("ClinicManagement.Entities.AggregateRoots.AppointmentAggregateRoot.Entities.Invoice", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.AppointmentAggregateRoot.Entities.PaymentInstallments", b =>
                {
                    b.HasOne("ClinicManagement.Entities.AggregateRoots.InsuranceCompanyAggregateRoot.InsuranceCompanyAggregateRoot", "InsuranceCompany")
                        .WithMany("PaymentInstallments")
                        .HasForeignKey("InsuranceCompanyId");

                    b.HasOne("ClinicManagement.Entities.AggregateRoots.AppointmentAggregateRoot.Entities.Invoice", "Invoice")
                        .WithMany("PaymentInstallments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InsuranceCompany");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.ClinicAggregateRoot.ClinicAggregateRoot", b =>
                {
                    b.OwnsOne("ClinicManagement.Entities.AggregateRoots.ClinicAggregateRoot.ValueObjects.Address", "ClinicAddress", b1 =>
                        {
                            b1.Property<Guid>("ClinicAggregateRootId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("InterCitiesAsJson")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("InterRegionsAsJson")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<decimal>("Latitude")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Longitude")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Section")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ClinicAggregateRootId");

                            b1.ToTable("ClinicAggregateRoots");

                            b1.ToJson("ClinicAddress");

                            b1.WithOwner()
                                .HasForeignKey("ClinicAggregateRootId");
                        });

                    b.Navigation("ClinicAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.InsuranceCompanyAggregateRoot.Entities.InsuredPatientUsers", b =>
                {
                    b.HasOne("ClinicManagement.Entities.AggregateRoots.InsuranceCompanyAggregateRoot.InsuranceCompanyAggregateRoot", "InsuranceCompany")
                        .WithMany("InsuredPatientUsers")
                        .HasForeignKey("InsuranceCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClinicManagement.Entities.AggregateRoots.UserAggregateRoot.UserAggregateRoot", "PatientUser")
                        .WithMany("InsuredPatientUsers")
                        .HasForeignKey("PatientUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InsuranceCompany");

                    b.Navigation("PatientUser");
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.UserAggregateRoot.Entities.RoleClaim", b =>
                {
                    b.HasOne("ClinicManagement.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.UserAggregateRoot.Entities.UserRole", b =>
                {
                    b.HasOne("ClinicManagement.Entities.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClinicManagement.Entities.AggregateRoots.UserAggregateRoot.UserAggregateRoot", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.UserAggregateRoot.UserAggregateRoot", b =>
                {
                    b.OwnsOne("ClinicManagement.Entities.AggregateRoots.UserAggregateRoot.ValueObjects.StatusInfo", "StatusInfo", b1 =>
                        {
                            b1.Property<Guid>("UserAggregateRootId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("InvitationCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsSuperAdmin")
                                .HasColumnType("bit");

                            b1.Property<Guid?>("ParentUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("UserAggregateRootId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("UserAggregateRootId");
                        });

                    b.Navigation("StatusInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicManagement.Entities.Identity.UserClaim", b =>
                {
                    b.HasOne("ClinicManagement.Entities.AggregateRoots.UserAggregateRoot.UserAggregateRoot", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicManagement.Entities.Identity.UserToken", b =>
                {
                    b.HasOne("ClinicManagement.Entities.AggregateRoots.UserAggregateRoot.UserAggregateRoot", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ClinicManagement.Entities.AggregateRoots.UserAggregateRoot.UserAggregateRoot", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.AppointmentAggregateRoot.AppointmentAggregateRoot", b =>
                {
                    b.Navigation("Invoice")
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.AppointmentAggregateRoot.Entities.Invoice", b =>
                {
                    b.Navigation("PaymentInstallments");
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.InsuranceCompanyAggregateRoot.InsuranceCompanyAggregateRoot", b =>
                {
                    b.Navigation("InsuredPatientUsers");

                    b.Navigation("PaymentInstallments");
                });

            modelBuilder.Entity("ClinicManagement.Entities.AggregateRoots.UserAggregateRoot.UserAggregateRoot", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("InsuredPatientUsers");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ClinicManagement.Entities.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
